<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World 42</title>
  
  <subtitle>工欲善其事必先利其器</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cynickimi.github.io/"/>
  <updated>2019-07-21T14:43:47.278Z</updated>
  <id>https://cynickimi.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux终端使用ShadowsocksR客户端</title>
    <link href="https://cynickimi.github.io/2019/07/21/shadowsocksr-client/"/>
    <id>https://cynickimi.github.io/2019/07/21/shadowsocksr-client/</id>
    <published>2019-07-20T16:00:00.000Z</published>
    <updated>2019-07-21T14:43:47.278Z</updated>
    
    <content type="html"><![CDATA[<p>国内云主机下载GitHub速度又是只有10KB/s,于是想到了在终端用代理来加速。但是问题来了，ssr有电脑客户端，手机客户端，那么Linux客户端在哪？<br><a id="more"></a></p><h2 id="local-py"><a href="#local-py" class="headerlink" title="local.py"></a>local.py</h2><p>其实搭建ssr服务端的那个文件夹就包含了一个<code>local.py</code>,这个文件就可以搭建Linux客户端，但是只支持socks5代理。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>local.py默认加载的配置文件在<code>user-config.json</code>里<br><img src="https://github.com/CynicKimi/images/raw/master/ssr_config.png" alt="配置文件"><br>一般只需要修改以下五项即可：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"server":"0.0.0.0",        //ssr服务器地址</span><br><span class="line">"server_port":8388,        //ssr服务端口</span><br><span class="line">"password":"password",     //ssr密码</span><br><span class="line">"method":"aes-256-cfb",    //ssr加密方式</span><br><span class="line">"protocol": "auth_aes128_md5",    //ssr协议</span><br><span class="line">"obfs":"http_simple",//ssr混淆</span><br></pre></td></tr></table></figure></p><p>运行：(目录：<code>/usr/local/shadowsocksr-3.2.2/shadowsocks</code>)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python local.py -d start</span><br></pre></td></tr></table></figure></p><p>也可通过<code>-c</code>参数指定配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python local.py -c &lt;config_file_dir&gt; -d start</span><br></pre></td></tr></table></figure></p><h3 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5-hostname 127.0.0.1:1080 www.google.com</span><br></pre></td></tr></table></figure><p>如果过了三秒还没有任何东西输出，则视为配置失败，请仔细检查local.py加载的配置文件正确与否</p><h2 id="HTTP-HTTPS转socks5代理工具—Privoxy"><a href="#HTTP-HTTPS转socks5代理工具—Privoxy" class="headerlink" title="HTTP/HTTPS转socks5代理工具—Privoxy"></a>HTTP/HTTPS转socks5代理工具—Privoxy</h2><p>现在可以通过socks5代理成功，那么http/https请求怎么办？<br>使用Privoxy工具将http/https请求转成socks5</p><h3 id="Privoxy安装（centos）"><a href="#Privoxy安装（centos）" class="headerlink" title="Privoxy安装（centos）"></a>Privoxy安装（centos）</h3><p>看了网上各种方法，都用yum安装，但是我试了一下，yum下并没有找到Privoxy包，所以只能使用编译安装了。<br>官方地址：<code>http://www.privoxy.org/</code>,首页就能看到当前最新版本是多少。</p><ul><li><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.privoxy.org/sf-download-mirror/Sources/3.0.28%20%28stable%29/privoxy-3.0.28-stable-src.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf  privoxy-3.0.28-stable-src.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译安装（当前目录：<code>/usr/local/src/privoxy-3.0.28-stable/</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">autoheader</span><br><span class="line">autoconf</span><br><span class="line"> ./configure --prefix=/usr/local/privoxy</span><br><span class="line"> make</span><br><span class="line"> make install</span><br><span class="line"> useradd  privoxy  -r  -s /usr/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>修改privoxy配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/privoxy/etc/config</span><br><span class="line">//添加以下配置信息</span><br><span class="line">forward-socks5 /  127.0.0.1:1080  .</span><br></pre></td></tr></table></figure></li></ul><p>监听127.0.0.1:8118请求，然后将请求以socks5转发到127.0.0.1:1080<br><img src="https://github.com/CynicKimi/images/raw/master/privoxy_config.png" alt="privoxy配置文件"></p><ul><li>启动privoxy<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/privoxy/sbin/privoxy  --user privoxy   /usr/local/privoxy/etc/config</span><br></pre></td></tr></table></figure></li></ul><h3 id="验证privoxy配置是否成功"><a href="#验证privoxy配置是否成功" class="headerlink" title="验证privoxy配置是否成功"></a>验证privoxy配置是否成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x 127.0.0.1:8118 www.google.com</span><br></pre></td></tr></table></figure><h3 id="设置终端代理"><a href="#设置终端代理" class="headerlink" title="设置终端代理"></a>设置终端代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy="127.0.0.1:8118"</span><br><span class="line">export https_proxy="127.0.0.1:8118"</span><br></pre></td></tr></table></figure><p>梳理一下访问流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http/https请求</span><br><span class="line">|</span><br><span class="line">| 通过终端代理127.0.0.1:8118</span><br><span class="line">|</span><br><span class="line">privoxy监听127.0.0.1:8118</span><br><span class="line">|</span><br><span class="line">| 将请求转成socks5到127.0.0.1:1080</span><br><span class="line">|</span><br><span class="line">ssr客户端监听socks5,127.0.0.1:1080</span><br><span class="line">|</span><br><span class="line">| </span><br><span class="line">|</span><br><span class="line">访问海外服务器部署的ssr</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国内云主机下载GitHub速度又是只有10KB/s,于是想到了在终端用代理来加速。但是问题来了，ssr有电脑客户端，手机客户端，那么Linux客户端在哪？&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://cynickimi.github.io/categories/tools/"/>
    
    
      <category term="shadowsocksr" scheme="https://cynickimi.github.io/tags/shadowsocksr/"/>
    
      <category term="linux" scheme="https://cynickimi.github.io/tags/linux/"/>
    
      <category term="privoxy" scheme="https://cynickimi.github.io/tags/privoxy/"/>
    
  </entry>
  
  <entry>
    <title>swoole学习笔记</title>
    <link href="https://cynickimi.github.io/2019/06/24/swoole/"/>
    <id>https://cynickimi.github.io/2019/06/24/swoole/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-07-20T13:49:17.094Z</updated>
    
    <content type="html"><![CDATA[<p>swoole初探<br><a id="more"></a></p><h2 id="TCP服务器"><a href="#TCP服务器" class="headerlink" title="TCP服务器"></a>TCP服务器</h2><p>tcp.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$serv = <span class="keyword">new</span> Swoole\Server(<span class="string">"127.0.0.1"</span>,<span class="number">9501</span>);</span><br><span class="line"></span><br><span class="line">$serv-&gt;set([</span><br><span class="line">    <span class="string">'worker_num'</span>=&gt;<span class="number">8</span>,<span class="comment">//worker进程数(ps aft |grep tcp.php可查看到)</span></span><br><span class="line">    <span class="string">"max_request"</span>=&gt;<span class="number">10000</span>,</span><br><span class="line"></span><br><span class="line">]);</span><br><span class="line"><span class="comment">//监听连接事件</span></span><br><span class="line">$serv-&gt;on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span><span class="params">($serv, $fd, $reactor_id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"client :&#123;$reactor_id&#125;-&#123;$fd&#125;-connect.\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听数据接收事件</span></span><br><span class="line">$serv-&gt;on(<span class="string">"receive"</span>,<span class="function"><span class="keyword">function</span><span class="params">($serv, $fd, $from_id, $data)</span></span>&#123;</span><br><span class="line">    $serv-&gt;send($fd,<span class="string">"Server: &#123;$from_id&#125;-&#123;$fd&#125;-&#123;$data&#125;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听连接关闭事件</span></span><br><span class="line">$serv-&gt;on(<span class="string">"close"</span>,<span class="function"><span class="keyword">function</span><span class="params">($serv,$fd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"client: Close.\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">$serv-&gt;start();</span><br></pre></td></tr></table></figure></p><p>终端测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>开启</span><br><span class="line">php tcp.php</span><br><span class="line"><span class="meta">#</span>另开一个终端连接测试(可发送数据)</span><br><span class="line">telnet 127.0.0.1 9501</span><br></pre></td></tr></table></figure></p><h2 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h2><p>tcp_client.php(替代上一步telnet)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$client = <span class="keyword">new</span> Swoole\client(SWOOLE_SOCK_TCP);</span><br><span class="line"><span class="keyword">if</span>(!$client-&gt;connect(<span class="string">'127.0.0.1'</span>,<span class="number">9501</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'连接失败'</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//php cli常量</span></span><br><span class="line">fwrite(STDOUT,<span class="string">"请输入消息："</span>);</span><br><span class="line">$msg = trim(fgets(STDIN));</span><br><span class="line"><span class="comment">//发送消息给tcp server</span></span><br><span class="line">$client-&gt;send($msg);</span><br><span class="line"><span class="comment">//接收来自server的数据</span></span><br><span class="line">$result = $client-&gt;recv();</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br></pre></td></tr></table></figure></p><p>终端测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>先打开tcp服务器</span><br><span class="line">php tcp.php</span><br><span class="line"><span class="meta">#</span>另开一个终端打开tcp客户端连接测试</span><br><span class="line">php tcp_client.php</span><br></pre></td></tr></table></figure></p><h2 id="UDP服务器"><a href="#UDP服务器" class="headerlink" title="UDP服务器"></a>UDP服务器</h2><p>UDP服务器与TCP服务器不同，UDP没有连接的概念。启动Server后，客户端无需Connect，直接可以向Server监听的9502端口发送数据包。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">udp.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$serv = <span class="keyword">new</span> Swoole\server(<span class="string">"127.0.0.1"</span>,<span class="number">9502</span>,SWOOLE_PROCESS,SWOOLE_SOCK_UDP);</span><br><span class="line"></span><br><span class="line">$serv-&gt;on(<span class="string">'Packet'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($serv, $data, $clientInfo)</span> </span>&#123;</span><br><span class="line">    $serv-&gt;sendto($clientInfo[<span class="string">'address'</span>], $clientInfo[<span class="string">'port'</span>], <span class="string">"Server "</span>.$data);</span><br><span class="line">    var_dump($clientInfo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;start();</span><br></pre></td></tr></table></figure></p><p>终端测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动udp服务器</span><br><span class="line">php udp.php</span><br><span class="line"><span class="meta">#</span>用nc命令进行连接测试(安装：yum install -y nc)</span><br><span class="line">nc -u 127.0.0.1 9502</span><br><span class="line">hello</span><br><span class="line">Server hello</span><br></pre></td></tr></table></figure></p><h2 id="UDP客户端"><a href="#UDP客户端" class="headerlink" title="UDP客户端"></a>UDP客户端</h2><p>udp_client.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$client = <span class="keyword">new</span> Swoole\client(SWOOLE_SOCK_UDP);</span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">"请输入消息："</span>);</span><br><span class="line">$msg = trim(fgets(STDIN));</span><br><span class="line"></span><br><span class="line">$client-&gt;sendto(<span class="string">'127.0.0.1'</span>,<span class="number">9502</span>,$msg);</span><br><span class="line">$result = $client-&gt;recv();</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br></pre></td></tr></table></figure></p><p>终端测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动udp服务器</span><br><span class="line">php udp.php</span><br><span class="line"><span class="meta">#</span>打开另一终端连接测试</span><br><span class="line">php udp_client.php</span><br></pre></td></tr></table></figure></p><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>与php内置服务器差不到的原理，不走php-fpm<br>ws_server.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$http = <span class="keyword">new</span> Swoole\Http\Server(<span class="string">"0.0.0.0"</span>,<span class="number">8811</span>);</span><br><span class="line"><span class="comment">//可设置静态文件</span></span><br><span class="line"><span class="comment">//底层收到Http请求会先判断document_root路径下是否存在此文件，如果存在会直接发送文件内容给客户端，不再触发onRequest回调</span></span><br><span class="line">$http-&gt;set(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'enable_static_handler'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'document_root'</span>=&gt;<span class="string">"/vagrant_data/study/swoole/data"</span>,<span class="comment">//静态文件根目录</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line">$http-&gt;on(<span class="string">"request"</span>,<span class="function"><span class="keyword">function</span><span class="params">($request, $response)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的GET参数</span></span><br><span class="line">    print_r($request-&gt;get);</span><br><span class="line">    <span class="comment">//可设置cookie，与PHP的setcookie一样</span></span><br><span class="line">    $response-&gt;cookie(<span class="string">'name'</span>,<span class="string">'cynickimi'</span>,time()+<span class="number">1800</span>);</span><br><span class="line">    <span class="comment">//向客户端浏览器发送HTML内容，string</span></span><br><span class="line">    $response-&gt;end(<span class="string">'GET:'</span>.json_encode($request-&gt;get));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure></p><h2 id="WebSocket服务器"><a href="#WebSocket服务器" class="headerlink" title="WebSocket服务器"></a>WebSocket服务器</h2><p>. 服务端</p><ul><li>WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工通信—允许服务器主动发送信息给客户端。</li><li>协议标识符<code>ws</code>  <code>wss</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$server = <span class="keyword">new</span> Swoole\WebSocket\Server(<span class="string">"0.0.0.0"</span>, <span class="number">8812</span>);</span><br><span class="line"><span class="comment">//设置静态文件来加载客户端</span></span><br><span class="line">$server-&gt;set(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'enable_static_handler'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'document_root'</span>=&gt;<span class="string">"/vagrant_data/study/swoole/data"</span>,</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"><span class="comment">//监听websocket连接打开事件</span></span><br><span class="line">$server-&gt;on(<span class="string">"open"</span>,<span class="string">'onOpen'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onOpen</span><span class="params">($server, $request)</span></span>&#123;</span><br><span class="line">    print_r($request-&gt;fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听ws消息事件</span></span><br><span class="line">$server-&gt;on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span><span class="params">(Swoole\WebSocket\Server $server,$frame)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"receive from client &#123;$frame-&gt;fd&#125;:&#123;$frame-&gt;data&#125;,opcode:&#123;$frame-&gt;opcode&#125;,fin:&#123;$frame-&gt;finish&#125;\n"</span>;</span><br><span class="line">    $server-&gt;push($frame-&gt;fd,<span class="string">"this is server receive:push success!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$server-&gt;on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span><span class="params">($ser, $fd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"client &#123;$fd&#125; closed\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$server-&gt;start();</span><br></pre></td></tr></table></figure><p>.客户端<br>ws_client.html(位置：websocket设置的document_root)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> wsUrl = <span class="string">"ws://192.168.1.10:8812"</span>;</span><br><span class="line">    <span class="keyword">var</span> websocket = <span class="keyword">new</span> WebSocket(wsUrl);</span><br><span class="line"></span><br><span class="line">    websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">        websocket.send(<span class="string">"hello,i am client."</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"connect-swoole-success."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ws-server-return-data:'</span>+evt.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    websocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">evt, e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error:"</span> + evt.data);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>.运行测试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动websocket服务端</span><br><span class="line">php ws_server.php</span><br><span class="line"><span class="meta">#</span>浏览器访问客户端</span><br><span class="line">http://192.168.1.10：8812/ws_client.html</span><br></pre></td></tr></table></figure></p><h2 id="Task任务（异步）"><a href="#Task任务（异步）" class="headerlink" title="Task任务（异步）"></a>Task任务（异步）</h2><p>ws.php(面向对象风格)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ws</span></span>&#123;</span><br><span class="line">    <span class="keyword">CONST</span> HOST = <span class="string">"0.0.0.0"</span>;</span><br><span class="line">    <span class="keyword">CONST</span> PORT = <span class="number">8812</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  $ws = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws = <span class="keyword">new</span> Swoole\WebSocket\Server(<span class="string">"0.0.0.0"</span>, <span class="number">8812</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;set([</span><br><span class="line">            <span class="string">'worker_num'</span>=&gt;<span class="number">2</span>,</span><br><span class="line">            <span class="string">"task_worker_num"</span>=&gt;<span class="number">2</span>,<span class="comment">//设置异步任务的工作进程数量</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"open"</span>,[<span class="keyword">$this</span>,<span class="string">"onOpen"</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"message"</span>,[<span class="keyword">$this</span>,<span class="string">"onMessage"</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"task"</span>,[<span class="keyword">$this</span>,<span class="string">"onTask"</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"finish"</span>,[<span class="keyword">$this</span>,<span class="string">"onFinish"</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"close"</span>,[<span class="keyword">$this</span>,<span class="string">"onClose"</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span><span class="params">($ws,$request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump($request-&gt;fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span><span class="params">($ws,$frame)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"ser-push-message:&#123;$frame-&gt;data&#125;\n"</span>;</span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'task'</span>=&gt;<span class="number">1</span>,</span><br><span class="line">            <span class="string">"fd"</span>=&gt;$frame-&gt;fd,</span><br><span class="line">        ];</span><br><span class="line">        $ws-&gt;task($data);<span class="comment">//出发onTask,异步</span></span><br><span class="line">        $ws-&gt;push($frame-&gt;fd,<span class="string">"server-push:"</span>.date(<span class="string">"Y-m-d H:i:s"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onTask</span><span class="params">($serv,$taskId,$workId,$data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        print_r($data);</span><br><span class="line">        <span class="comment">//耗时场景</span></span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"on task finish."</span>;<span class="comment">//告诉worker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $serv</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $taskId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data onTask函数return的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onFinish</span><span class="params">($serv, $taskId, $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"taskID:&#123;$taskId&#125;\n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"finish-data-success:&#123;$data&#125;.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClose</span><span class="params">($ws,$fd)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"clientid:&#123;$fd&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> Ws();</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>websocket服务端</span><br><span class="line">php ws.php</span><br><span class="line"><span class="meta">#</span>启动websocket客户端</span><br><span class="line">php http_server.php</span><br><span class="line">http://192.168.1.10:8811/ws_client.php</span><br></pre></td></tr></table></figure></p><h2 id="异步文件系统IO"><a href="#异步文件系统IO" class="headerlink" title="异步文件系统IO"></a>异步文件系统IO</h2><p><strong>4.3.0之后的版本用协程代替(coroutine)</strong></p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$result = Swoole\Async::readfile(<span class="keyword">__DIR__</span>.<span class="string">"/1.txt"</span>,<span class="function"><span class="keyword">function</span><span class="params">($filename,$fileContent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"filename:"</span>.$filename.PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"content:"</span>.$fileContent.PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line">var_dump($result);<span class="comment">//优先输出</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"start"</span>.PHP_EOL;<span class="comment">//优先输出</span></span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = date(<span class="string">"Y-m-d H:i:s"</span>);</span><br><span class="line">swoole_async_writefile(<span class="keyword">__DIR__</span>.<span class="string">"/1.log"</span>,$content,<span class="function"><span class="keyword">function</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>.PHP_EOL;</span><br><span class="line">&#125;,FILE_APPEND);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"start"</span>.PHP_EOL;</span><br></pre></td></tr></table></figure><h2 id="异步MySQL"><a href="#异步MySQL" class="headerlink" title="异步MySQL"></a>异步MySQL</h2><p><strong>Swoole\MySQL已内置到Swoole中，无需通过–enable-async-mysql编译参数开启</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AysMysql</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $dbSource = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbConfig = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dbSource = <span class="keyword">new</span> Swoole\Mysql;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dbConfig = [</span><br><span class="line">            <span class="string">'host'</span> =&gt; <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">3306</span>,</span><br><span class="line">            <span class="string">'user'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'password'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="string">'swoole'</span>,</span><br><span class="line">            <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_tables</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dbSource-&gt;connect(<span class="keyword">$this</span>-&gt;dbConfig, <span class="function"><span class="keyword">function</span><span class="params">($db, $result)</span></span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">"connect."</span>.PHP_EOL;</span><br><span class="line">           <span class="keyword">if</span>($result === <span class="keyword">false</span>)&#123;</span><br><span class="line">               var_dump($db-&gt;connect_error);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           $sql = <span class="string">'show tables'</span>;</span><br><span class="line">           $db-&gt;query($sql, <span class="function"><span class="keyword">function</span><span class="params">(Swoole\MySQL $db, $result)</span></span>&#123;</span><br><span class="line">               <span class="keyword">if</span> ($result === <span class="keyword">false</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   var_dump($db-&gt;error, $db-&gt;errno);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">elseif</span> ($result === <span class="keyword">true</span> )</span><br><span class="line">               &#123;</span><br><span class="line">                   var_dump($db-&gt;affected_rows, $db-&gt;insert_id);</span><br><span class="line">               &#125;</span><br><span class="line">               var_dump($result);</span><br><span class="line">               $db-&gt;close();</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> AysMysql();</span><br><span class="line">$obj-&gt;show_tables();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"start"</span>.PHP_EOL;<span class="comment">//优先输出</span></span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>process.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$process = <span class="keyword">new</span> swoole_process(<span class="function"><span class="keyword">function</span><span class="params">(swoole_process $pro)</span></span>&#123;</span><br><span class="line">    $pro-&gt;exec(<span class="string">"/usr/local/php7.2/bin/php"</span>,[<span class="keyword">__DIR__</span>.<span class="string">"/../server/http_server.php"</span>]);</span><br><span class="line">&#125;, <span class="keyword">false</span>);</span><br><span class="line">$pid = $process-&gt;start();<span class="comment">//创建子进程</span></span><br><span class="line"><span class="keyword">echo</span> $pid.PHP_EOL;<span class="comment">//子进程pid</span></span><br><span class="line">swoole_process::wait();<span class="comment">//回收结束运行的子进程。</span></span><br></pre></td></tr></table></figure></p><p>测试：<br>运行process.php,会打印出子进程id,即是创建的http_server进程的id<br><img src="https://github.com/CynicKimi/images/raw/master/process1.png" alt><br>查看process.php的进程号<br><img src="https://github.com/CynicKimi/images/raw/master/process2.png" alt><br>查看process.php(4124)进程下的所有进程关系：<br><img src="https://github.com/CynicKimi/images/raw/master/process3.png" alt><br>查看http_server.php的进程关系：<br><img src="https://github.com/CynicKimi/images/raw/master/process4.png" alt></p><p>使用场景：模拟读取4个url，每个耗时1s，一般顺序执行需要4s<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"process-start-time:"</span>.date(<span class="string">"Ymd H:i:s"</span>).PHP_EOL;</span><br><span class="line">$workers = [];</span><br><span class="line">$curl = [</span><br><span class="line">  <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">  <span class="string">'https://www.taobao.com'</span>,</span><br><span class="line">  <span class="string">'https://www.php.net/'</span>,</span><br><span class="line">  <span class="string">'https://wiki.swoole.com'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curlData</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">    <span class="comment">//模拟读取耗时场景</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'read'</span>.$url.<span class="string">" success."</span>.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;<span class="number">4</span>; $i++)&#123;</span><br><span class="line">    $process = <span class="keyword">new</span> Swoole\Process(<span class="function"><span class="keyword">function</span><span class="params">(Swoole\Process $worker)</span> <span class="title">use</span><span class="params">($i,$curl)</span></span>&#123;</span><br><span class="line">        $content = curlData($curl[$i]);</span><br><span class="line">        <span class="keyword">echo</span> $content.PHP_EOL;</span><br><span class="line">    &#125;,<span class="keyword">true</span>);</span><br><span class="line">    $pid = $process-&gt;start();</span><br><span class="line">    $workers[$pid] = $process;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($workers <span class="keyword">as</span> $process)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $process-&gt;read();<span class="comment">//从管道中读取数据。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"process-end-time:"</span>.date(<span class="string">"Ymd H:i:s"</span>).PHP_EOL;</span><br></pre></td></tr></table></figure></p><p>执行结果：1s就执行结束<br><img src="https://github.com/CynicKimi/images/raw/master/process_test.png" alt></p><h2 id="内存表"><a href="#内存表" class="headerlink" title="内存表"></a>内存表</h2><p>使用场景：可用于数据共享。觉得有点类似redis<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建内存表</span></span><br><span class="line">$table = <span class="keyword">new</span> swoole_table(<span class="number">1024</span>);</span><br><span class="line">$table-&gt;column(<span class="string">'id'</span>, $table::TYPE_INT, <span class="number">4</span>);</span><br><span class="line">$table-&gt;column(<span class="string">'name'</span>,$table::TYPE_STRING, <span class="number">64</span>);</span><br><span class="line">$table-&gt;column(<span class="string">'age'</span>, $table::TYPE_INT, <span class="number">3</span>);</span><br><span class="line">$table-&gt;create();</span><br><span class="line"><span class="comment">//新增内容</span></span><br><span class="line">$table-&gt;set(<span class="string">'cynickimi'</span>,[<span class="string">'id'</span>=&gt;<span class="number">1</span>,<span class="string">'name'</span>=&gt;<span class="string">'cynickimi'</span>,<span class="string">'age'</span>=&gt;<span class="number">24</span>]);</span><br><span class="line"><span class="comment">//另一种新增内容方法</span></span><br><span class="line">$table[<span class="string">'cynickimi2'</span>]=[</span><br><span class="line">    <span class="string">'id'</span>=&gt;<span class="number">2</span>,</span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'cynickimi2'</span>,</span><br><span class="line">    <span class="string">'age'</span>=&gt;<span class="number">24</span>,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//两种获取数据的方法</span></span><br><span class="line">print_r($table-&gt;get(<span class="string">'cynickimi'</span>));</span><br><span class="line">print_r($table[<span class="string">'cynickimi'</span>]);</span><br><span class="line"><span class="comment">//自增</span></span><br><span class="line">$table-&gt;incr(<span class="string">'cynickimi2'</span>,<span class="string">'age'</span>,<span class="number">2</span>);</span><br><span class="line">print_r($table[<span class="string">'cynickimi2'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行完释放内存，可用于共享数据</span></span><br></pre></td></tr></table></figure></p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="协程MySQL"><a href="#协程MySQL" class="headerlink" title="协程MySQL"></a>协程MySQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$http = <span class="keyword">new</span> Swoole\Http\Server(<span class="string">'0.0.0.0'</span>, <span class="number">8811</span>);</span><br><span class="line">$http-&gt;on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span><span class="params">($request, $response)</span></span>&#123;</span><br><span class="line">    $swoole_mysql = <span class="keyword">new</span> Swoole\Coroutine\MySQL();</span><br><span class="line"></span><br><span class="line">    $swoole_mysql-&gt;connect([</span><br><span class="line">        <span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'port'</span>=&gt;<span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>=&gt;<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>=&gt;<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'database'</span>=&gt;<span class="string">'swoole'</span>,</span><br><span class="line">    ]);</span><br><span class="line">    $res = $swoole_mysql-&gt;query(<span class="string">"show tables"</span>);</span><br><span class="line">    print_r($res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php mysql.php</span><br><span class="line">curl 127.0.0.1:8811</span><br></pre></td></tr></table></figure></p><h3 id="协程Redis"><a href="#协程Redis" class="headerlink" title="协程Redis"></a>协程Redis</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$http = <span class="keyword">new</span> swoole_http_server(<span class="string">'0.0.0.0'</span>, <span class="number">8811</span>);</span><br><span class="line">$http-&gt;on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span><span class="params">($request, $response)</span></span>&#123;</span><br><span class="line">    $redis = <span class="keyword">new</span> Swoole\Coroutine\Redis();</span><br><span class="line">    $redis-&gt;connect(<span class="string">'127.0.0.1'</span>,<span class="number">6379</span>);</span><br><span class="line">    $value = $redis-&gt;get($request-&gt;get[<span class="string">'key'</span>]);</span><br><span class="line">    $response-&gt;header(<span class="string">"Content-Type"</span>,<span class="string">"text/plain"</span>);</span><br><span class="line">    $response-&gt;end($value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php redis.php</span><br><span class="line"><span class="meta">#</span>获取redis中key为name的值</span><br><span class="line">curl 127.0.0.1:8811?key=name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swoole初探&lt;br&gt;
    
    </summary>
    
      <category term="swoole" scheme="https://cynickimi.github.io/categories/swoole/"/>
    
    
      <category term="swoole" scheme="https://cynickimi.github.io/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>ShadowsocksR代理模式</title>
    <link href="https://cynickimi.github.io/2019/06/22/shadowsocksr/"/>
    <id>https://cynickimi.github.io/2019/06/22/shadowsocksr/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-07-20T13:49:06.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>浏览器一般会自动启用系统代理，而其它软件则需要自身支持HTTP代理或Socks5代理，并且一般不会自动启用系统代理，需要进行手动配置才可以进行代理。</p><h3 id="直连模式"><a href="#直连模式" class="headerlink" title="直连模式"></a>直连模式</h3><p>直接模式会在系统代理设置里关闭代理，使启用系统代理设置的软件（一般为浏览器）直接连接网络。<br>但是，它并没有关闭在本地构建的代理服务器，其它手动配置代理的软件仍然可以进行连接。</p><h3 id="PAC模式（Proxy-auto-config）"><a href="#PAC模式（Proxy-auto-config）" class="headerlink" title="PAC模式（Proxy auto-config）"></a>PAC模式（Proxy auto-config）</h3><p>PAC模式会在系统代理设置设置一个PAC脚本文件，让系统通过这个文件自动选择每一个连接是否启用代理服务器，也就是判断流量是否进入客户端。<br>选择PAC模式后可以看到系统设置里面的PAC脚本地址：(该链接的内容就是shadowsocksr文件夹下的<code>pac.txt</code>)<br><img src="https://github.com/CynicKimi/images/raw/master/pac.png" alt="设置-网络和internet-代理-自动设置代理"></p><h3 id="全局模式"><a href="#全局模式" class="headerlink" title="全局模式"></a>全局模式</h3><p>全局模式会在系统代理设置手动设置一个代理服务器，所有跟随系统代理设置的软件（一般是浏览器）都会使用这个代理服务器。<br><img src="https://github.com/CynicKimi/images/raw/master/overall.png" alt="设置-网络和internet-代理-手动设置代理"></p><h3 id="代理规则"><a href="#代理规则" class="headerlink" title="代理规则"></a>代理规则</h3><p>除了上面三种模式，ssr还有一个代理规则：根据IP判断，按设定的规则来判断进入 客户端的流量是直连还是走代理。<br>顺序：先走三种模式之一 -&gt; 再走代理规则<br>即当你访问 XXX 网站，然后是全局或者满足PAC条件从而访问 XXX网站的请求数据流量进入了客户端，然后客户端会根据 XXX网站的IP来判断：</p><ul><li>绕过局域网：当IP属于局域网内时，直连；反之走代理。</li><li>绕过局域网和大陆：当IP属于大陆内或局域网时，直连；反之走代理。</li><li>绕过局域网和非大陆：当IP属于大陆外(非大陆IP都算大陆外)或局域网时，直连；反之走代理。</li></ul><h2 id="设置终端走代理"><a href="#设置终端走代理" class="headerlink" title="设置终端走代理"></a>设置终端走代理</h2><p>开启SSR客户端允许其他软件连接：右键-&gt;选项设置<br><img src="https://github.com/CynicKimi/images/raw/master/open_ssr_proxy.png" alt="开启shadowsocksr本地代理"></p><h3 id="GIT设置代理"><a href="#GIT设置代理" class="headerlink" title="GIT设置代理"></a>GIT设置代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//设置</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">//取消</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h3 id="终端设置代理"><a href="#终端设置代理" class="headerlink" title="终端设置代理"></a>终端设置代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//设置</span><br><span class="line">export http_proxy=&quot;192.168.1.6:1080&quot;</span><br><span class="line">export https_proxy=&quot;192.168.1.6:1080&quot;</span><br><span class="line">//取消</span><br><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><p>一般用<code>curl www.google.com</code> 来测试终端代理配置是否成功<br>也可用配置，直接测试：</p><ul><li>测试HTTP代理访问:<code>curl -x &lt;proxy_ip&gt;:&lt;proxy_port&gt; www.google.com</code></li><li>测试socks5代理(本地解析域名)：<code>curl --socks5 &lt;proxy_ip&gt;:&lt;proxy_port&gt; www.google.com</code></li><li>测试socks5代理(代理解析域名)：<code>curl --socks5-hostname &lt;proxy_ip&gt;:&lt;proxy_port&gt; www.google.com</code></li></ul><h4 id="–socks5和–socks5-hostname的区别"><a href="#–socks5和–socks5-hostname的区别" class="headerlink" title="–socks5和–socks5-hostname的区别"></a>–socks5和–socks5-hostname的区别</h4><p>在客户端访问域名的时候，涉及到一个问题，这个域名是应该是客户端解析完告诉代理服务器ip还是应该把域名交给代理服务器去解析？<br>实验：<br>我在测试的时候发现使用–socks5去请求google.com是失败的，原因是国内的DNS解析获取到的ip已经被污染了。于是我通过国外的服务器获取到google.com的真实ip，然后在本地设置hosts，结果用–socks5成功的请求到google.com。<br>结论：当然是交给代理服务器去解析咯。</p><p>官方解释（<code>man curl</code>）：</p><blockquote><p>–socks5-hostname &lt;host[:port]&gt;<br>   Use the specified SOCKS5 proxy (and let the proxy resolve the host name). If the  port  number  is  not specified, it is assumed at port 1080. (Added in 7.18.0)<br>   This option overrides any previous use of -x, –proxy, as they are mutually exclusive.<br>   Since 7.21.7, this option is superfluous since you can specify a socks5 hostname proxy with -x, –proxy using a socks5h:// protocol prefix.<br>   If this option is used several times, the last one will be used. (This option  was  previously  wrongly documented and used as –socks without the number appended.)</p></blockquote><blockquote><p>–socks5 &lt;host[:port]&gt;<br>   Use  the  specified  SOCKS5 proxy - but resolve the host name locally. If the port number is not specified, it is assumed at port 1080.<br>   This option overrides any previous use of -x, –proxy, as they are mutually exclusive.<br>   Since 7.21.7, this option is superfluous since you can specify a socks5 proxy with -x, –proxy using  a socks5:// protocol prefix.<br>   If  this  option  is used several times, the last one will be used. (This option was previously wrongly documented and used as –socks without the number appended.)<br>   This option (as well as –socks4) does not work with IPV6, FTPS or LDAP.</p></blockquote><hr><p>参考资料：</p><p><a href="https://vimcaw.github.io/blog/2018/03/12/Shadowsocks%28R%29%E8%AE%BE%E7%BD%AE%EF%BC%9A%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81PAC%E3%80%81%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99" target="_blank" rel="noopener"> Shadowsocks(R)设置：系统代理模式、PAC、代理规则</a><br><a href="https://vimcaw.github.io/blog/2018/03/11/Shadowsocks%28R%29%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">Shadowsocks(R)基本原理</a><br><a href="https://www.cnblogs.com/cc11001100/p/9949729.html" target="_blank" rel="noopener">自己动手开发Socks5代理服务器</a><br><a href="https://my.sssr.tw/knowledgebase/5/ShadowsocksR.html" target="_blank" rel="noopener">ShadowsocksR中的代理规则是什么?</a></p>]]></content>
    
    <summary type="html">
    
      git clone 速度被限制在20KB,明明又开了ssr，结果发现是终端没有开启ssr代理
    
    </summary>
    
      <category term="tools" scheme="https://cynickimi.github.io/categories/tools/"/>
    
    
      <category term="shadowsocksr" scheme="https://cynickimi.github.io/tags/shadowsocksr/"/>
    
      <category term="代理" scheme="https://cynickimi.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="科学上网" scheme="https://cynickimi.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>windows下的命令行工具Cmder</title>
    <link href="https://cynickimi.github.io/2019/06/19/Cmder/"/>
    <id>https://cynickimi.github.io/2019/06/19/Cmder/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-21T17:48:54.457Z</updated>
    
    <content type="html"><![CDATA[<p>windows的神器，传言不虚。可以在同一个窗口打开多个Tab，还可以一个Tab分屏多个终端，简直不要太棒。<br><a id="more"></a></p><h2 id="添加cmder-here"><a href="#添加cmder-here" class="headerlink" title="添加cmder here"></a>添加cmder here</h2><p>右键时可以cmder here，就不用每次打开都项目都去<code>cd</code><br>以<strong>管理员身份</strong>运行<code>Cmder.exe /REGISTER ALL</code><br>(注：没有配置环境变量时，要到该文件的目录去执行该命令，不然会找不到cmder.exe文件。但我没有配置到环境变量，因为我安装了<code>Listary</code>,要启动时也可以快速找到)<br><img src="https://github.com/CynicKimi/images/raw/master/cmder_here.PNG" alt="cmder"></p><h2 id="改变命令提示符λ为"><a href="#改变命令提示符λ为" class="headerlink" title="改变命令提示符λ为`"></a>改变命令提示符<code>λ</code>为`</h2><h3 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h3><ul><li>找到文件<code>cmder\vender\clink.lua</code></li><li>将<code>local lambda = &quot;λ&quot;</code>修改为<code>local lambda = &quot;$&quot;</code></li></ul><p><img src="https://github.com/CynicKimi/images/raw/master/prompt.png" alt="cmder"><br>(注：看了好多文章都是修改上一句的<code>{lamb}</code>为<code>$</code>,也可以实现一样的效果，但是不建议这么改。<br>虽然没学过lua，但是也可以看懂下面语法，最终用了<code>string.gsub</code>函数进行了一个字符串替换，将<code>{lamb}</code>替换成<code>lambda</code>变量的内容，而且上面的注释语句也说明了，有时候可能提示符会变成<code>(env)$</code>,如果照网上的改法，就永远只能是<code>$</code>了)</p><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>进入bash还是发现提示符还是<code>λ</code>。。。</p><ul><li>找到文件<code>cmder\vender\git-for-windows\etc\profile.d\git-prompt.sh</code></li><li>将<code>PS1=&quot;$PS1&quot;&#39;λ &#39;</code> 改为<code>PS1=&quot;$PS1&quot;&#39;$ &#39;</code></li></ul><h2 id="设置-ll命令"><a href="#设置-ll命令" class="headerlink" title="设置 ll命令"></a>设置 ll命令</h2><p>cmder没有<code>ll</code>命令，可以通过设置alias来实现<br>找到<code>cmder\config\user-aliases.cmd</code>文件<br>添加以下几行带，代码、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">la=ls -aF --show-control-chars -F --color $*</span><br><span class="line">ll=ls -alF --show-control-chars -F --color $*</span><br></pre></td></tr></table></figure></p><h2 id="设置启动的默认目录"><a href="#设置启动的默认目录" class="headerlink" title="设置启动的默认目录"></a>设置启动的默认目录</h2><ul><li><code>win+alt+p</code>打开设置</li><li>到Startup-Tasks菜单下，选择对应的终端，加入<code>-new_console:d:&lt;dirname&gt;</code><br><img src="https://github.com/CynicKimi/images/raw/master/start_dir.png" alt="设置启动目录"></li></ul><h2 id="配置git-bash"><a href="#配置git-bash" class="headerlink" title="配置git bash"></a>配置git bash</h2><p>如果下载了full版本，自带了git-for-window,就不需要配置了。<br>具体配置方法如下：<br><img src="https://github.com/CynicKimi/images/raw/master/git_cmder.png" alt="cmder"></p><h2 id="快捷键命令"><a href="#快捷键命令" class="headerlink" title="快捷键命令"></a>快捷键命令</h2><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ctrl + `</td><td style="text-align:center">调出和隐藏cmder</td></tr><tr><td style="text-align:center">win + alt + p</td><td style="text-align:center">打开设置面板</td></tr><tr><td style="text-align:center">ctrl + t</td><td style="text-align:center">新打开终端窗口</td></tr><tr><td style="text-align:center">shift + alt + number</td><td style="text-align:center">新打开终端窗口(具体见setting-startup-tasks)</td></tr><tr><td style="text-align:center">alt + enter</td><td style="text-align:center">窗口全屏显示</td></tr><tr><td style="text-align:center">Shift + mouse</td><td style="text-align:center">从缓冲区中选择并复制文本</td></tr><tr><td style="text-align:center">Right click / Ctrl + Shift + v</td><td style="text-align:center">粘贴文本</td></tr><tr><td style="text-align:center">ctrl+u</td><td style="text-align:center">删除当前命令行内容</td></tr><tr><td style="text-align:center">ctrl+l</td><td style="text-align:center">清屏</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows的神器，传言不虚。可以在同一个窗口打开多个Tab，还可以一个Tab分屏多个终端，简直不要太棒。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://cynickimi.github.io/categories/tools/"/>
    
    
      <category term="cmder" scheme="https://cynickimi.github.io/tags/cmder/"/>
    
      <category term="tools" scheme="https://cynickimi.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>WIN10下使用自带的SSH和SCP命令</title>
    <link href="https://cynickimi.github.io/2019/06/18/win-ssh-scp/"/>
    <id>https://cynickimi.github.io/2019/06/18/win-ssh-scp/</id>
    <published>2019-06-17T16:00:00.000Z</published>
    <updated>2019-06-19T15:23:22.887Z</updated>
    
    <content type="html"><![CDATA[<p>发现村里刚通网，才知道win10下的命令行已经支持ssh和scp命令了<br><a id="more"></a><br><img src="https://github.com/CynicKimi/images/raw/master/ssh_and_scp.PNG" alt="ssh_and_scp"></p><h3 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h3><p>使用：<br><code>scp -P &lt;端口&gt; &lt;filename&gt; &lt;用户名&gt;@&lt;IP地址&gt;:&lt;目标目录&gt;</code></p><p><img src="https://github.com/CynicKimi/images/raw/master/scp_1.PNG" alt="scp"></p><p><filename>参数还有另外几种写法：</filename></p><ul><li>在当前目录：<code>./filename</code></li><li>在其他盘下：<code>D:/filename</code></li></ul><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>使用：<br><code>ssh -p &lt;端口&gt; &lt;用户名&gt;@&lt;IP地址&gt;</code></p><p><img src="https://github.com/CynicKimi/images/raw/master/ssh_login.PNG" alt="ssh_login"></p><h4 id="公钥方式登录"><a href="#公钥方式登录" class="headerlink" title="公钥方式登录"></a>公钥方式登录</h4><p>ssh登录linux一般有两种方式：</p><ul><li>用户名和密码（每次登录都需要输入密码）</li><li>用户名公钥</li></ul><p>1.创建公钥私钥：cmd上执行ssh-keygen命令创建密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C  &apos;your email@domain.com&apos;</span><br><span class="line"></span><br><span class="line">-t 指定密钥类型，默认即 rsa ，可以省略</span><br><span class="line">-C 设置注释文字，比如你的邮箱，可以省略</span><br></pre></td></tr></table></figure><p>生成过程中会提示输入密码两次，如果不想在使用公钥的时候输入密码，可以回车跳过；<br>密钥默认保存位置在 ~/.ssh 目录下，打开后会看到私钥文件 id_rsa 和公钥文件 id_rsa.pub；</p><p><img src="https://github.com/CynicKimi/images/raw/master/ssh_rsa.png" alt="ssh_rsa"></p><p>2.复制公钥至服务器<br>使用 scp 命令将本地的公钥文件 id_rsa.pub 复制到需要连接的Linux服务器的·<code>~/.ssh</code>目录下：<br><code>scp -P &lt;端口号&gt;  ~/.ssh/id_rsa.pub  &lt;用户名&gt;@&lt;IP地址&gt;:~/.ssh</code></p><p>3.把公钥内容追加到<code>authorized_keys</code>文件里（不存在则创建一个）：<br><code>cat id_rsa.pub &gt;&gt; authorized_keys</code></p><p>期间可能出现问题的解决办法：<br>.权限问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh/</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><p>.ssh问题：<br>找到/etc/ssh/sshd_config ，把RSAAuthentication和PubkeyAuthentication两行前面的#注释去掉。</p><p>4.重启sshd服务(centos7):</p><p><code>systemctl restart sshd.service</code></p><p>5.以后无需输入密码，用<code>-i</code>参数来使用公钥连接：(缺点：须在./ssh目录下)</p><p><code>ssh -p &lt;端口&gt; -i id_rsa &lt;用户名&gt;@&lt;IP地址&gt;</code></p><h4 id="配置config文件进行连接"><a href="#配置config文件进行连接" class="headerlink" title="配置config文件进行连接"></a>配置config文件进行连接</h4><p>优点：</p><ul><li>可以不用输入密码</li><li>可以不用输入端口号和IP地址</li><li>可以在任何目录下直接连接</li><li>可以配置多个服务器</li></ul><p>1.在./ssh目录下创建config文件<br>2.config文件添加配置，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host            alias            #自定义别名</span><br><span class="line">HostName        hostname         #替换为你的ssh服务器ip或domain</span><br><span class="line">Port            port             #ssh服务器端口，默认为22</span><br><span class="line">User            root             #ssh服务器用户名</span><br><span class="line">IdentityFile    ~/.ssh/id_rsa    #第一个步骤生成的公钥文件对应的私钥文件</span><br></pre></td></tr></table></figure><p><img src="https://github.com/CynicKimi/images/raw/master/ssh_config.png" alt="ssh_config"></p><p>以后，就可以用 自定义的别名来登录：<code>ssh alias</code></p><p><img src="https://github.com/CynicKimi/images/raw/master/ssh_config_login.png" alt="ssh_config_login"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现村里刚通网，才知道win10下的命令行已经支持ssh和scp命令了&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://cynickimi.github.io/categories/tools/"/>
    
    
      <category term="ssh" scheme="https://cynickimi.github.io/tags/ssh/"/>
    
      <category term="scp" scheme="https://cynickimi.github.io/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建</title>
    <link href="https://cynickimi.github.io/2019/06/03/hexo-command/"/>
    <id>https://cynickimi.github.io/2019/06/03/hexo-command/</id>
    <published>2019-06-02T16:00:00.000Z</published>
    <updated>2019-06-04T13:45:47.476Z</updated>
    
    <content type="html"><![CDATA[<p>以前博客在CSDN，自己用Tampermonkey插件修改了html结构，弄了一个整洁版的，但还是放弃了，理由是：广告真的太多，而且CSDN内相同的博文太多了。<br>期间想过自己搭建一个博客，但是由于强迫症，考虑到页面的美观和数据库设计问题以及日后迁移问题，所以迟迟没有动手。最后还是决定把数据托管在GitHub，并使用Hexo。</p><h2 id="Hexo-Github-pages"><a href="#Hexo-Github-pages" class="headerlink" title="Hexo + Github pages"></a>Hexo + Github pages</h2><h3 id="创建github-pages"><a href="#创建github-pages" class="headerlink" title="创建github pages"></a>创建github pages</h3><p>官方文档：<code>https://pages.github.com/</code><br>新建一个仓库 New repository，仓库命名为 <code>&lt;username&gt;.github.io</code></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g //使用npm安装hexo</span><br><span class="line">hexo init &lt;directory&gt; //初始化博客,&lt;directory&gt;为要创建的文件夹名</span><br><span class="line">cd &lt;directory&gt; //进入博客文件夹</span><br><span class="line">npm install //npm安装依赖文件</span><br><span class="line">hexo server //启动hexo，若失败，请先执行&apos;npm install hexo-server --save’</span><br></pre></td></tr></table></figure><p>本地访问：<code>localhost:4000</code><br>(注：hexo命令可能会执行失败，用绝对路径执行命令，比如我的hexo在<code>/usr/local/nodejs/bin/hexo</code>;也可以将你的hexo路径加到环境变量，之后便可用hexo命令)</p><h3 id="部署到线上GitHub-pages"><a href="#部署到线上GitHub-pages" class="headerlink" title="部署到线上GitHub pages"></a>部署到线上GitHub pages</h3><p>1.打开hexo配置文件<code>_config.yml</code>，找到deploy(注意缩进)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>(个人建议用<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:<strong><em><code>,而不是</code><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></em></strong>`,这样就不用每次推到github上的时候都要输入用户名和密码了)<br>2.推到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g//hexo generate生成静态文件</span><br><span class="line">hexo d//hexo deploy部署到线上,`hexo d`报错时，执行`npm install hexo-deployer-git`;</span><br></pre></td></tr></table></figure></p><p>(<code>hexo clean</code>:清除缓存文件db.json 和已经生成的静态文件夹public)</p><h2 id="使用两个分支保存源文件"><a href="#使用两个分支保存源文件" class="headerlink" title="使用两个分支保存源文件"></a>使用两个分支保存源文件</h2><p><code>hexo d</code>操作把编译后的静态文件推到GitHub上，但是以后换电脑了怎么办？理想状态是你还可以找的到以前源文件，但是总是有最坏的情况出现：源文件也找不到了。为了避免这种情况，不如也把源文件放在GitHub。<br>具体操作：</p><ul><li>线上创建一个分支（目的存放源文件），并将其设为默认分支</li><li>git clone 分支（目的为了获得.git文件夹，即获得新分支的管理权限）</li><li>将.git文件夹复制到hexo文件夹下（博客根目录），以后在这个文件夹下git push，则会将源码推到默认分支，而hexo g和hexo d操作后则会将静态文件提交到master分支</li></ul><p>以后换到新环境，只需要<code>git clone &lt;默认分支地址&gt;</code> ,然后执行 <code>npm install</code>安装相关依赖就行了</p><h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>以前也弄过花里胡哨的博客，但现在只喜欢简单的，所以采用了大道至简的主题，并做了一些小修改。<br>文档地址:<code>https://github.com/tufu9441/maupassant-hexo</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前博客在CSDN，自己用Tampermonkey插件修改了html结构，弄了一个整洁版的，但还是放弃了，理由是：广告真的太多，而且CSDN内相同的博文太多了。&lt;br&gt;期间想过自己搭建一个博客，但是由于强迫症，考虑到页面的美观和数据库设计问题以及日后迁移问题，所以迟迟没有动
      
    
    </summary>
    
      <category term="Hexo" scheme="https://cynickimi.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://cynickimi.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
