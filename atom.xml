<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World 42</title>
  
  <subtitle>工欲善其事必先利其器</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cynickimi.github.io/"/>
  <updated>2019-06-19T15:12:56.382Z</updated>
  <id>https://cynickimi.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows下的命令行工具Cmder</title>
    <link href="https://cynickimi.github.io/2019/06/19/Cmder/"/>
    <id>https://cynickimi.github.io/2019/06/19/Cmder/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-19T15:12:56.382Z</updated>
    
    <content type="html"><![CDATA[<p>windows的神器，传言不虚。可以在同一个窗口打开多个Tab，还可以一个Tab分屏多个终端，简直不要太棒。<br><a id="more"></a></p><h2 id="添加cmder-here"><a href="#添加cmder-here" class="headerlink" title="添加cmder here"></a>添加cmder here</h2><p>右键时可以cmder here，就不用每次打开都项目都去<code>cd</code><br>以<strong>管理员身份</strong>运行<code>Cmder.exe /REGISTER ALL</code><br>(注：没有配置环境变量时，要到该文件的目录去执行该命令，不然会找不到cmder.exe文件。但我没有配置到环境变量，因为我安装了<code>Listary</code>,要启动时也可以快速找到)<br><img src="https://github.com/CynicKimi/images/raw/master/cmder_here.PNG" alt="cmder"></p><h2 id="改变命令提示符λ为"><a href="#改变命令提示符λ为" class="headerlink" title="改变命令提示符λ为`"></a>改变命令提示符<code>λ</code>为`</h2><ul><li>找到文件<code>cmder\vender\clink.lua</code></li><li>将<code>local lambda = &quot;λ&quot;</code>修改为<code>local lambda = &quot;$&quot;</code></li></ul><p><img src="https://github.com/CynicKimi/images/raw/master/prompt.png" alt="cmder"><br>(注：看了好多文章都是修改上一句的<code>{lamb}</code>为<code>$</code>,也可以实现一样的效果，但是不建议这么改。<br>虽然没学过lua，但是也可以看懂下面语法，最终用了<code>string.gsub</code>函数进行了一个字符串替换，将<code>{lamb}</code>替换成<code>lambda</code>变量的内容，而且上面的注释语句也说明了，有时候可能提示符会变成<code>(env)$</code>,如果照网上的改法，就永远只能是<code>$</code>了)</p><h2 id="设置-ll命令"><a href="#设置-ll命令" class="headerlink" title="设置 ll命令"></a>设置 ll命令</h2><p>cmder没有<code>ll</code>命令，可以通过设置alias来实现<br>找到<code>cmder\config\user-aliases.cmd</code>文件<br>添加以下几行带，代码、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">la=ls -aF --show-control-chars -F --color $*</span><br><span class="line">ll=ls -alF --show-control-chars -F --color $*</span><br></pre></td></tr></table></figure></p><h2 id="快捷键命令"><a href="#快捷键命令" class="headerlink" title="快捷键命令"></a>快捷键命令</h2><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ctrl + `</td><td style="text-align:center">调出和隐藏cmder</td></tr><tr><td style="text-align:center">win + alt + p</td><td style="text-align:center">打开设置面板</td></tr><tr><td style="text-align:center">ctrl + t</td><td style="text-align:center">新打开终端窗口</td></tr><tr><td style="text-align:center">shift + alt + number</td><td style="text-align:center">新打开终端窗口(具体见setting-startup-tasks)</td></tr><tr><td style="text-align:center">alt + enter</td><td style="text-align:center">窗口全屏显示</td></tr><tr><td style="text-align:center">Shift + mouse</td><td style="text-align:center">从缓冲区中选择并复制文本</td></tr><tr><td style="text-align:center">Right click / Ctrl + Shift + v</td><td style="text-align:center">粘贴文本</td></tr><tr><td style="text-align:center">ctrl+u</td><td style="text-align:center">删除当前命令行内容</td></tr><tr><td style="text-align:center">ctrl+l</td><td style="text-align:center">清屏</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows的神器，传言不虚。可以在同一个窗口打开多个Tab，还可以一个Tab分屏多个终端，简直不要太棒。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://cynickimi.github.io/categories/tools/"/>
    
    
      <category term="cmder" scheme="https://cynickimi.github.io/tags/cmder/"/>
    
      <category term="tools" scheme="https://cynickimi.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建</title>
    <link href="https://cynickimi.github.io/2019/06/03/hexo-command/"/>
    <id>https://cynickimi.github.io/2019/06/03/hexo-command/</id>
    <published>2019-06-02T16:00:00.000Z</published>
    <updated>2019-06-04T13:45:47.476Z</updated>
    
    <content type="html"><![CDATA[<p>以前博客在CSDN，自己用Tampermonkey插件修改了html结构，弄了一个整洁版的，但还是放弃了，理由是：广告真的太多，而且CSDN内相同的博文太多了。<br>期间想过自己搭建一个博客，但是由于强迫症，考虑到页面的美观和数据库设计问题以及日后迁移问题，所以迟迟没有动手。最后还是决定把数据托管在GitHub，并使用Hexo。</p><h2 id="Hexo-Github-pages"><a href="#Hexo-Github-pages" class="headerlink" title="Hexo + Github pages"></a>Hexo + Github pages</h2><h3 id="创建github-pages"><a href="#创建github-pages" class="headerlink" title="创建github pages"></a>创建github pages</h3><p>官方文档：<code>https://pages.github.com/</code><br>新建一个仓库 New repository，仓库命名为 <code>&lt;username&gt;.github.io</code></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g //使用npm安装hexo</span><br><span class="line">hexo init &lt;directory&gt; //初始化博客,&lt;directory&gt;为要创建的文件夹名</span><br><span class="line">cd &lt;directory&gt; //进入博客文件夹</span><br><span class="line">npm install //npm安装依赖文件</span><br><span class="line">hexo server //启动hexo，若失败，请先执行&apos;npm install hexo-server --save’</span><br></pre></td></tr></table></figure><p>本地访问：<code>localhost:4000</code><br>(注：hexo命令可能会执行失败，用绝对路径执行命令，比如我的hexo在<code>/usr/local/nodejs/bin/hexo</code>;也可以将你的hexo路径加到环境变量，之后便可用hexo命令)</p><h3 id="部署到线上GitHub-pages"><a href="#部署到线上GitHub-pages" class="headerlink" title="部署到线上GitHub pages"></a>部署到线上GitHub pages</h3><p>1.打开hexo配置文件<code>_config.yml</code>，找到deploy(注意缩进)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>(个人建议用<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:<strong><em><code>,而不是</code><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></em></strong>`,这样就不用每次推到github上的时候都要输入用户名和密码了)<br>2.推到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g//hexo generate生成静态文件</span><br><span class="line">hexo d//hexo deploy部署到线上,`hexo d`报错时，执行`npm install hexo-deployer-git`;</span><br></pre></td></tr></table></figure></p><p>(<code>hexo clean</code>:清除缓存文件db.json 和已经生成的静态文件夹public)</p><h2 id="使用两个分支保存源文件"><a href="#使用两个分支保存源文件" class="headerlink" title="使用两个分支保存源文件"></a>使用两个分支保存源文件</h2><p><code>hexo d</code>操作把编译后的静态文件推到GitHub上，但是以后换电脑了怎么办？理想状态是你还可以找的到以前源文件，但是总是有最坏的情况出现：源文件也找不到了。为了避免这种情况，不如也把源文件放在GitHub。<br>具体操作：</p><ul><li>线上创建一个分支（目的存放源文件），并将其设为默认分支</li><li>git clone 分支（目的为了获得.git文件夹，即获得新分支的管理权限）</li><li>将.git文件夹复制到hexo文件夹下（博客根目录），以后在这个文件夹下git push，则会将源码推到默认分支，而hexo g和hexo d操作后则会将静态文件提交到master分支</li></ul><p>以后换到新环境，只需要<code>git clone &lt;默认分支地址&gt;</code> ,然后执行 <code>npm install</code>安装相关依赖就行了</p><h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>以前也弄过花里胡哨的博客，但现在只喜欢简单的，所以采用了大道至简的主题，并做了一些小修改。<br>文档地址:<code>https://github.com/tufu9441/maupassant-hexo</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前博客在CSDN，自己用Tampermonkey插件修改了html结构，弄了一个整洁版的，但还是放弃了，理由是：广告真的太多，而且CSDN内相同的博文太多了。&lt;br&gt;期间想过自己搭建一个博客，但是由于强迫症，考虑到页面的美观和数据库设计问题以及日后迁移问题，所以迟迟没有动
      
    
    </summary>
    
      <category term="Hexo" scheme="https://cynickimi.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://cynickimi.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
